#!/bin/bash
#
# Calculate open reading frame positions for each exon:
#
#    1     2       3      4         exons
# |----->------>------>--------->
# |  |  |  |  |  |  |  |  |  |  |   open reading frame
# ^      ^      ^      ^
# 1      8      15     22           exon start positions
#
# Open reading frame positions are 1, 2 or 3.
#
# Exon 01 is always 1: (1 % 3) = 1
# Exon 08 here is 2: 8 % 3 == 2
# Exon 03 here is 3: 15 % 3 == 0 (set this to 3 manually)
#
# Argument 1 ($1): Input FASTA file with reference exons
# Argument 2 ($2): Output tab delimited table with orf positions

awk '
BEGIN {
	print "exon_no\torf_position";
	status = -2;
	# status = 
	# -2 initial status
	# -1 (meta data of 3->5 exon entry)
	# 0 (seq data of 3->5 exon entry)
	# 1 (meta data of 5->3 exon entry)
	# 2 (seq data of 5->3 exon entry)
	total_seq = ""
}
{
	if ($0 ~ /^>exon_[0-9]+ /) {
		match($0, /^>exon_[0-9]+ /);
		exon_no = substr($0, RSTART+6, RLENGTH-6);
		if (status == -2) {
			exon_start_pos = 1;
			exon_orf_pos = 1;
		} else {
			exon_start_pos = length(total_seq) + 1;
			exon_orf_pos = exon_start_pos % 3;
			if (exon_orf_pos == 0) {
				exon_orf_pos = 2;
			} else if (exon_orf_pos == 2) {
				exon_orf_pos = 3;
			}
		}
		printf "%d\t%d\n", exon_no, exon_orf_pos;		
		status = 1;
	}
	else if ($0 ~ /^>exon_[0-9]+_rc /) {
		status = -1;
	}
	else {
	    if (($0 ~ /[ACGTN]+/) && (status >= 1)) {
	    	# Sequence for the 5->3 exon entry
	    	status = 2;
	    	total_seq = total_seq $0;
	    }
		else { # Sequence for 3->5 exon entry
			# Reverse complement sequence, just skip
			# and update status.
			status = 0;
		}
		
	}
}' $1 > $2