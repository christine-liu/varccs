#!/bin/bash
#
# Input arguments:
# input - Input is the original FASTQ file.
# prefix - prefix for all output files. (default: first 8 letters of input file)
# qs_ath - average quality score threshold. filter out all sequences that have average quality score lower than this. (default: 85)
# qs_hth - homopolymer quality score threshold.

echo ""
echo "FASTQ Quality Control to FASTA"

# Get scripts directory; supports symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

if [[ $# -lt 1 ]]; then
  echo "fastq_qc_to_fasta: need to provide arguments. see -h or --help."
  exit
fi
if [[ $# -lt 2 && "$1" != "-h" && "$1" != "--help" ]]; then
  echo "fastq_qc_to_fasta: need to provide arguments. see -h or --help."
  exit
fi

while [[ $# -gt 1 || "$1" == "-h" || "$1" == "--help" ]]
do
  key="$1"
  case $key in
      -i|--input)
      input_fastq="$2"
      shift # past argument
      ;;
      -m|--primers)
      input_primers="$2"
      shift
      ;;
      -p|--prefix) # Output prefix
      prefix="$2"
      shift
      ;;
      --do-quality-filtering) # Do average quality score filtering?
      j_qfilter="$2"
      shift
      ;;
      --do-homopolymer-run-filtering)
      j_homo="$2"
      shift
      ;;
      --do-pcr-alignment-filtering)
      j_primeraln="$2"
      shift
      ;;
      -qs_ath|--qs_ath) # Minimum average quality score of read
      qs_ath="$2"
      shift # past argument
      ;;
      -qs_hth|--qs_hth) # Maximun quality score for homopolymer run filter
      qs_hth="$2"
      shift
      ;;
      -qs_sym|--qs_sum) # Symbol for homopolymer run
      qs_sym="$2"
      shift
      ;;
      -run_hth|--run_hth) # Minimum run length for homopolymer run filter
      run_hth="$2"
      shift
      ;;
      -pb_ws|--pb_ws) # Word size for blast reads vs primers
      pb_ws="$2"
      shift
      ;;
      -pb_off|--pb_off) # Maximum alignment offest for blast reads vs primers
      pb_off="$2"
      shift
      ;;
      --del-intermediate-files) # Delete all intermediate files?
      del_files="$2"
      shift
      ;;
      --del-filtered-reads)
      del_filtered="$2"
      shift
      ;;
      -h|--help) # Show program usage
      cat $DIR/manuals/fastq_qc_to_fasta.txt | more
      exit
      shift
      ;;
      --default)
      DEFAULT=YES
      ;;
      *)
      echo "fastq_qc_to_fasta: unknown argument $key"
      # unknown option
      ;;
  esac
  shift # past argument or value
done


# For any argument not in input set as default values
if [ -z "$prefix" ]; then
  # Default output prefix is the entire path of the original file
  prefix=${input_fastq%.*}
  echo "? output prefix not provided. Generated: $prefix"  
fi

if [ -z "$del_files" ]; then
  del_files=1
fi
if [ -z "$del_filtered" ]; then
  del_filtered=1
fi

# Arguments specifying which jobs (processing parts) to execute
# do all jobs by default unless specified otherwise
if [ -z "$j_qfilter" ]; then
  j_qfilter=1
fi
if [ -z "$j_homo" ]; then
  j_homo=1
fi
if [ -z "$j_primeraln" ]; then
  j_primeraln=1
fi

echo ""
echo "Jobs to do:"
echo -n "* average quality score filter: "
if [ "$j_qfilter" -eq "1" ]; then
  echo -n "ON "
  if [ -z "$qs_ath" ]; then
    qs_ath=85
  fi
  echo "(min qscore: $qs_ath)"
else
  echo "OFF"
fi

echo -n "* homopolymer run filter: "
if [ "$j_homo" -eq "1" ]; then
  echo -n "ON "
  if [ -z "$qs_hth" ]; then
    qs_hth=30
  fi
  if [ -z "$run_hth" ]; then
    run_hth=2
  fi
  if [ -z "$qs_sym" ]; then
    qs_sym="N"
  fi
  echo "(qscore threshold: $qs_hth, num. repeats: ${run_hth}+)"
else
  echo "OFF"
fi

echo -n "* PCR primer alignment filter: "
if [ "$j_primeraln" -eq "1" ]; then
  echo -n "ON "
  if [ -z "$pb_ws" ]; then
    pb_ws="auto"
  fi
  if [ -z "$pb_off" ]; then
    pb_off=150
  fi
  if [ -z "$input_primers" ]; then
    echo ""
    echo "! ERROR: PCR primer file not provided."
    exit 1
  fi
  echo "(BLAST word size: $pb_ws)"
else
  echo "OFF"
fi

echo ""
echo "Executing jobs:"

# Average quality score filter
if [ "$j_qfilter" -eq "1" ]; then  
  out_qc1="${prefix}_filtered_qs${qs_ath}"
  echo -n "* average quality filter... "
  $DIR/fastq_qscore_filter_fast "$qs_ath" "$input_fastq" "${out_qc1}.fastq"
  echo "OK."
else
  echo "* SKIP: average quality filter"
  out_qc1="$prefix"
fi

# Homopolymer run filter
if [ "$j_homo" -eq "1" ]; then
  out_qc2="${out_qc1}_hpf_qs${qs_hth}_rep${run_hth}"
  echo -n "* homopolymer run filter... "
  $DIR/fastq_homopolymer_filter.py "${out_qc1}.fastq" "$qs_hth" "$run_hth" \
    "${out_qc2}.fastq" "${out_qc2}_homopolymer_qs.txt" "$qs_sym"
  echo "OK."
else
  echo "* SKIP: homopolymer run filter"
  out_qc2="$out_qc1"
fi

# # Counting unique reads
# out_qc3="${out_qc2}_count_unique_reads.txt"
# echo -n "* counting unique reads... "
# awk 'NR % 4 == 2 { print $0 }' "${out_qc2}.fastq" | sort | uniq -c > "$out_qc3"
# echo "OK."

# # Generate FASTA file
# out_qc4="${out_qc2}_unique"
# echo -n "*"
# awk '{ printf ">read_%05d;count_%d\n%s\n", NR, $1, $2 }' "$out_qc3" > "${out_qc4}.fasta"
# echo "OK."

# Find unique reads in FASTQ and convert to FASTA
out_qc3="${out_qc2}_unique"
$DIR/fastq_unique_to_fasta "${out_qc2}.fastq" "${out_qc3}.fasta"

# BLAST reads vs primers, find uniques again
if [ "$j_primeraln" -eq "1" ]; then
  echo "* PCR primer alignment filter..."
  out_qc5="${out_qc3}_primerblasted_ws${pb_ws}"
  $DIR/blast_reads_vs_primers "$input_primers" "${out_qc3}.fasta" \
    "${out_qc5}.fasta" "${out_qc5}_filtered.fasta" \
    "$pb_off" "pb_ws"
else
  echo "* SKIP: BLAST reads vs PCR primers"
  out_qc5="${out_qc4}"
fi


# Find uniques now with reverse complements:
echo -n "* finding unique reads (adding up counts)... "
awk '
   BEGIN { c = 0 }
   {
     if (NR % 2 == 0) {
       if ($0 in seq) {
         seq[$0] += c
       }
       else {
         seq[$0] = c
       }
     }
     else {
       split($0,a,"_");
       c = a[3]
     }
   }
   END {
     j = 0
     for (i in seq) {
       printf ">read_%05d;count_%d\n%s\n",j,seq[i],i;
       j++
     }
   }
 ' "${out_qc5}.fasta" > "${out_qc5}_unique.fasta"
echo " OK."
echo "  -> ${out_qc5}_unique.fasta"

# Delete intermediate files?
if [ "$del_files" -eq "1" ]; then
  echo -n "* deleting temporary files"
  rm "${out_qc1}.fastq"
  echo -n "."
  rm "${out_qc2}.fastq"
  echo -n "."
  rm "${out_qc2}_homopolymer_qs.txt"
  echo -n "."
  rm "${out_qc3}.fasta"
  echo -n "."
  rm "${out_qc5}.fasta"
  echo -n "."
  if [ "$del_filtered" -eq "1" ]; then
    rm "${out_qc5}_filtered.fasta"
    echo -n "."
  fi
  echo " OK."
fi

echo ""
echo "Done."
echo ""