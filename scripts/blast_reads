#!/bin/bash
#
# Input 1. FASTA reads/*_wsXX_uniques.fa
#       2. FASTA file with exons, i.e. fa/app_exons_cds_clean_rc.fa
#       3. Word size for primer blast
#       4. Gap opening penalty
#       5. Gap extension penalty

echo ""
echo "BLAST Quality Controlled reads to Reference Exons"
echo ""

# Get scripts directory; supports symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

if [[ $# -lt 1 ]]; then
  echo "blast_reads: need to provide arguments. see -h or --help."
  exit
fi
if [[ $# -lt 2 && "$1" != "-h" && "$1" != "--help" ]]; then
  echo "blast_reads: need to provide arguments. see -h or --help."
  exit
fi

while [[ $# -gt 1 || "$1" == "-h" || "$1" == "--help" ]]
do
  key="$1"
  case $key in
      -i|--input) # Input FASTA file with processed / qc'ed reads
      input_file="$2"
      shift # past argument
      ;;
      -e|--exons) # Input FASTA file with exon sequences we are blasting against
      input_exons="$2"
      shift
      ;;
      -ws|--word-size) # Word size for blast reads vs exons
      word_size="$2"
      shift # past argument
      ;;
      -go|--gap-open) # Gap opening penalty
      go="$2"
      shift
      ;;
      -ge|--gap-extend) # Gap extension penalty
      ge="$2"
      shift
      ;;
      -p|--prefix) # Prefix for output files
      out="$2"
      shift
      ;;
      --fix-lowq-homopolymer-runs) # Fix low q homopolymer runs
      hmpfix="$2"
      shift
      ;;
      --del-intermediate-files) # Delete all intermediate files?
      del_files="$2"
      shift
      ;;
      -h|--help) # Show program usage
      cat $DIR/manuals/blast_reads.txt | more
      exit
      shift
      ;;
      --default)
      DEFAULT=YES
      ;;
      *)
      echo "blast_reads: unknown argument $key"
      # unknown option
      ;;
  esac
  shift # past argument or value
done

# For any argument not in input set as default values
if [ -z "${word_size}" ]; then
  word_size=25
fi
if [ -z "$go" ]; then
  go=0
fi
if [ -z "$ge" ]; then
  ge=2
fi

if [ -z "$del_files" ]; then
  del_files=1
fi

if [ -z "$hmpfix" ]; then
  hmpfix=1
fi

# input_blast_base="${input_file%%.*}"
# input_blast_base="${input_blast_base##*/}"


if [ -z $out ]; then
  prefix="${input_file%.*}"
else
  prefix=$out
fi

out_blast="${prefix}_blast_results_ws${word_size}_go${go}_gx${ge}.txt"
out_lentab="${prefix}_read_length_table.txt"
out_exonlengths="${prefix}_exon_lengths.txt"
out_exontable="${prefix}_exon_table.txt"
out_exonsum="${prefix}_exon_combinations_summary.txt"


# echo "Input file: $input_file"
# echo "Input blast base: $input_blast_base"
# echo "Output length file: $out_lentab"
# echo "Output blast results file: $out_blast"
# echo "Skip: $skip"

# if [[ "$skip" == "0" || "$readlen" == "1" ]]; then
echo -n "* calculating read lengths... "
awk '
BEGIN {
  print "read_id\tread_length"
}
{
  if (NR % 2 == 0) {
    printf "%d\n", length($0)
  } else {
    match($0, /^>(.*);/);
    printf "%s\t", substr($0, RSTART+1, RLENGTH-2)
  }
}' $input_file > $out_lentab
echo "OK."

# Blast reads vs exons
# Swap reads with data
$DIR/blast_reads_vs_exons $input_file $input_exons $out_blast $word_size $go $ge
# fi

# Generate length table
echo -n "* calculating reference exon lengths... "
awk '
  BEGIN { print "exon_id\texon_length" }
  {
    if (NR % 2 == 0) {
      printf "%d\n", length($0)
    } else {
      match($0, /^>([^ ]+) /);
      printf "%s\t", substr($0, RSTART+1, RLENGTH-2)
    }
  }
' $input_exons > $out_exonlengths
echo "OK."

# Generate exon summaries
Rscript $DIR/blast_results_to_exon_table.R \
  --input $out_blast --read_lengths $out_lentab \
  --exon_lengths $out_exonlengths \
  --output $out_exontable --output_sum $out_exonsum || true

# Generate output filenams for homopolymer fixing script
out_fasta="${input_file%.*}_hmpfix.fasta"
out_table="${out_exontable%.*}_hmpfix.txt"

if [ "$hmpfix" -eq "1" ]; then
  Rscript $DIR/fasta_homopolymer_fix.R \
    --input-fasta $input_file --input $out_exontable \
    --output-table $out_table --output-fasta $out_fasta
fi

if [ "$del_files" -eq "1" ]; then
  echo -n "* deleting temporary files"
  if [ -f $out_blast ]; then rm $out_blast; fi
  echo -n "."
  if [ -f $out_lentab ]; then rm $out_lentab; fi
  echo -n "."
  if [ -f $out_exonlengths ]; then rm $out_exonlengths; fi
  echo -n "."
  if [ -f $input_file ]; then rm $input_file; fi
  echo -n "."
  if [ -f $out_exontable ]; then rm $out_exontable; fi
  echo -n "."
  echo " OK."
fi

echo ""
echo "Done."
echo ""
