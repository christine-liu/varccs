#!/bin/bash
#
# Plot reading frames.

echo ""
echo "Reading frame circo plot"
echo ""

# Get scripts directory; supports symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

exe=$(basename $0)

if [[ $# -lt 1 ]]; then
  echo "$exe: need to provide arguments. see -h or --help."
  exit
fi
if [[ $# -lt 2 && "$1" != "-h" && "$1" != "--help" ]]; then
  echo "$exe: need to provide arguments. see -h or --help."
  exit
fi


while [[ $# -gt 1 || "$1" == "-h" || "$1" == "--help" ]]
do
  key="$1"
  case $key in
    -i|--input-contigs) 
    # Input table with reading frame contigs
    # output from the `reading_frame_analysis` script.
    input_contig_table="$2"
    shift # past argument
    ;;
    -e|--input-exons) 
    input_exons="$2"
    shift
    ;;
    -e|--input-exons-fasta) 
    input_exons_fasta="$2"
    shift
    ;;
    -o|--output-circoplot)
	output_circo="$2"
	shift
	;;
    -h|--help) # Show program usage
    cat $DIR/manuals/${exe}_plot.txt | more
    exit
    shift
    ;;
    --default)
    DEFAULT=YES
    ;;
    *)
    echo "blast_reads: unknown argument $key"
    # unknown option
    ;;
  esac
  shift # past argument or value
done

if [ -z "$del_files" ]; then
  del_files=1
fi
if [ -z "$plot_abeta" ]; then
  plot_abeta=0
fi

if [ -z "$input_fads" ]; then
  input_fads=""
else
  input_fads="--input-fads ${input_fads}"
fi


